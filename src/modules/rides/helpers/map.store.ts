import { Injectable } from '@nestjs/common';

@Injectable()
export class MapStore<T> {
    private _store: Map<string, Set<T>>;
    private lastValues: Map<string, T>;
    private connectedTrips: Map<string, number>;
    private timeSave: Map<
        string,
        {
            online?: string | Date;
            offline?: string | Date;
        }
    >;
    private allDriversSubscribers: Array<string>;
    constructor() {
        this._store = new Map();
        this.lastValues = new Map();
        this.connectedTrips = new Map();
        this.timeSave = new Map();
        this.allDriversSubscribers = [];
    }

    /* Returning the first value in the set and then deleting it from the set. */
    async pop(key: string): Promise<T | null> {
        const value = this._store.get(key);

        if (value && value.size > 0) {
            const obj = [...value][0];
            console.info('First->>', ...value);
            console.info('End');
            value.delete(obj);
            console.info('SEcond->>', ...value);
            console.info('End');
            this._store.set(key, value);
            this.lastValues.set(key, obj);
            return obj;
        }
        return null;
    }

    /**
     * It sets the value of the key in the store to the value of the value parameter.
     * @param {string} key - The key to store the value under.
     * @param value - The value to be stored.
     */
    async set(key: string, value: Set<T>) {
        this._store.set(key, new Set());
        this._store.set(key, value);
    }
    /**
     * It returns the last value of the given key, or null if there is no such value
     * @param {string} key - The key to store the value under.
     * @returns The last value of the key.
     */
    async lastValue(key: string): Promise<T | null> {
        return this.lastValues.get(key) || null;
    }

    /**
     * It takes a roomId and a trip_id, and then it sets the roomId as the key and the trip_id as the
     * value in the connectedTrips Map
     * @param {string} roomId - The roomId is the unique identifier for the room. It is generated by
     * the server and is unique for each room.
     * @param {number} trip_id - The id of the trip that the user is currently on.
     * @returns A promise
     */
    /**
     * It takes a roomId and a trip_id, and then it sets the roomId as the key and the trip_id as the
     * value in the connectedTrips Map
     * @param {string} roomId - The roomId is the unique identifier for the room. It is generated by
     * the server and is unique for each room.
     * @param {number} trip_id - The id of the trip that the user is currently on.
     * @returns A promise
     */
    async connect(roomId: string, trip_id: number) {
        return this.connectedTrips.set(roomId, trip_id);
    }
    /**
     * It returns a promise that resolves to the value of the key in the connectedTrips Map
     * @param {string} roomId - The id of the room you want to get the connected trips for.
     * @returns The connected trips
     */
    async getConnected(roomId: string) {
        return this.connectedTrips.get(roomId);
    }

    async saveTime(
        user_id: string,
        key: 'online' | 'offline',
        date: string | Date,
    ) {
        const existing = (await this.getTimeSave(user_id)) || {};
        existing[key] = date;
        this.timeSave.set(user_id, existing);
        return this.getTimeSave(user_id);
    }

    async getTimeSave(user_id) {
        return this.timeSave.get(user_id);
    }

    async getAllDriversSubscribers() {
        return this.allDriversSubscribers;
    }

    async addDriverSunscriber(id: string) {
        const arr = [...this.allDriversSubscribers];
        arr.push(id);
        this.allDriversSubscribers = [...new Set(arr)];
    }
    async removeDriverSunscriber(id: string) {
        this.allDriversSubscribers = this.allDriversSubscribers.filter(
            (val) => val !== id,
        );
    }
}
